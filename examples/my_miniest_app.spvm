class {
  
  use MyAIUtil2;
  use Array;
  use Hash;
  use List;
  use IntList;
  use IO::File;
  use FindBin;
  
  static method main : void () {
    
    # Learning Rate
    my $learning_rate = 3;
    
    # Epoch count - the number of runs of the training set
    my $epoch_count = 30;
    
    # Mini-batch size
    my $mini_batch_size = 10;
    
    # Number of neurons in each layer
    # 28 * 28 = 728 monochrome images         (input)
    # Through 30 intermediate outputs         (Intermediate Output 1)
    # Classify into 10 categories from 0 to 9 (output)
    my $neurons_count_in_layers = [784, 30, 10];
    
    my $program_dir = FindBin->Bin;
    
    # Read MNIEST image information - handwritten training data to use as input
    my $mnist_train_image_file = "$program_dir/data/train-images-idx3-ubyte";
    my $mnist_train_image_info = &load_mnist_train_image_file($mnist_train_image_file);
    
    # Read MNIEST label information - expected output for handwritten training data
    my $mnist_train_label_file = "$program_dir/data/train-labels-idx1-ubyte";
    my $mnist_train_label_info = &load_mnist_train_label_file($mnist_train_label_file);
    
    # Train a deep network
    MyAIUtil2->train_deep_network($mnist_train_image_info, $mnist_train_label_info, $epoch_count, $mini_batch_size, $neurons_count_in_layers, $learning_rate);
  }
  
  # Load MNIST image information
  static method load_mnist_train_image_file : Hash ($mnist_image_file : string) {
    
    my $mnist_image_fh = IO::File->new($mnist_image_file, "<");
    
    # Magic Number
    my $image_buffer = (mutable string)new_string_len 256;
    $mnist_image_fh->read($image_buffer, 4);
    
    my $magic_number = Fn->unpack("l>", $image_buffer)->[0]->(int);
    if ($magic_number != 0x00000803) {
      die "Invalid magic number expected " . 0x00000803 . "actual $magic_number";
    }
    
    # Number of images
    $mnist_image_fh->read($image_buffer, 4);
    my $items_count = Fn->unpack("l>", $image_buffer)->[0]->(int);
    
    # Image row pixel count
    $mnist_image_fh->read($image_buffer, 4);
    my $rows_count = Fn->unpack("l>", $image_buffer)->[0]->(int);
    
    # Image column pixel count
    $mnist_image_fh->read($image_buffer, 4);
    my $columns_count = Fn->unpack("l>", $image_buffer)->[0]->(int);
    
    # Loading images
    my $all_images_length = $items_count * $rows_count * $columns_count;
    my $image_data = (mutable string)new_string_len $all_images_length;
    my $read_length = $mnist_image_fh->read($image_data, $all_images_length);
    unless ($read_length == $all_images_length) {
      die "Can't read all images";
    }
    
    # Image information
    my $image_info = Hash->new;
    $image_info->set(items_count => $items_count);
    $image_info->set(rows_count => $rows_count);
    $image_info->set(columns_count => $columns_count);
    $image_info->set(data => $image_data);
    
    return $image_info;
  }
  
  # Load MNIST image information
  static method load_mnist_train_label_file : Hash ($mnist_label_file : string) {
    
    my $mnist_label_fh = IO::File->new($mnist_label_file, "<");
    
    # Magic Number
    my $label_buffer = (mutable string)new_string_len 256;
    $mnist_label_fh->read($label_buffer, 4);
    my $magic_number = Fn->unpack("l>", $label_buffer)->[0]->(int);;
    if ($magic_number != 0x00000801) {
      die "Invalid magic number expected " . 0x00000801 . "actual $magic_number";
    }
    
    # Number of labels
    $mnist_label_fh->read($label_buffer, 4);
    my $items_count = Fn->unpack("l>", $label_buffer)->[0]->(int);
    
    # Loading labels
    my $label_numbers_list = IntList->new;
    for (my $i = 0; $i < $items_count; $i++) {
      $mnist_label_fh->read($label_buffer, 1);
      my $label_number = Fn->unpack("c", $label_buffer)->[0]->(byte)->(int);
      $label_numbers_list->push($label_number);
    }
    my $label_numbers = $label_numbers_list->to_array;
    
    # Label Information
    my $label_info = Hash->new;
    $label_info->set(items_count => $items_count);
    $label_info->set(label_numbers => $label_numbers);
    
    return $label_info;
  }
  
}
